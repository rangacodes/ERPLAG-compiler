<program>  --->					<moduleDeclarations><otherModules><driverModule><otherModules>
<moduleDeclarations>  --->		<moduleDeclaration><moduleDeclarations> | e
<moduleDeclaration>   --->		DECLARE MODULE ID SEMICOL
<otherModules>  --->			<module><otherModules> | e
<driverModule>  --->			DRIVERDEF DRIVER PROGRAM DRIVERENDDEF <moduleDef>
<module>  --->					DEF MODULE ID ENDDEF TAKES INPUT SQBO <input_plist> SQBC SEMICOL <ret><moduleDef>
<ret>  --->						RETURNS SQBO <output_plist> SQBC SEMICOL | e
<input_plist>  --->				ID COLON <dataType><input_plist1>
<input_plist1>  --->			COMMA ID COLON <dataType><input_plist1> | e
<output_plist>  --->			ID COLON <type><output_plist1>
<output_plist1>  --->			COMMA ID COLON <type><output_plist1> | e
<dataType>  --->				INTEGER | REAL | BOOLEAN | ARRAY SQBO <range_arrays> SQBC OF <type>
<range_arrays>	--->			<index> RANGEOP <index>
<type>  --->					INTEGER | REAL | BOOLEAN
<moduleDef>  --->				START <statements> END
<statements>  --->				<statement><statements> | e
<statement>  --->				<ioStmt> | <simpleStmt> | <declareStmt> | <conditionalStmt> | <iterativeStmt>
<ioStmt>  --->					GET_VALUE BO ID BC SEMICOL | PRINT BO <var> BC SEMICOL
<var>  --->						<var_id_num> | <boolConstt>
<var_id_num>	--->			ID <whichId> | NUM | RNUM
<boolConstt>	--->			TRUE | FALSE
<whichId>  --->					SQBO <index> SQBC | e
<simpleStmt>  --->				<assignmentStmt> | <moduleReuseStmt>
<assignmentStmt>   --->			ID <whichStmt>
<whichStmt>  --->				<lvalueIDStmt> | <lvalueARRStmt>
<lvalueIDStmt>  --->			ASSIGNOP <expression> SEMICOL
<lvalueARRStmt>   --->			SQBO <index> SQBC ASSIGNOP <expression> SEMICOL
<index>  --->					NUM | ID
<moduleReuseStmt>   --->		<optional> USE MODULE ID WITH PARAMETERS <idList> SEMICOL
<optional>  --->				SQBO <idList> SQBC ASSIGNOP | e
<idList>  --->					ID <idList1>
<idList1>  --->					COMMA ID <idList1> | e
<expression>  --->				<arithmeticOrBooleanExpr> | <U>
<U>	--->						<unary_op><new_NT>
<new_NT>	--->				BO <arithmeticExpr> BC | <var_id_num>
<unary_op>	--->				PLUS | MINUS
<arithmeticOrBooleanExpr>  --->	<AnyTerm><arithmeticOrBooleanExpr1>
<arithmeticOrBooleanExpr1> ---> <logicalOp><AnyTerm><arithmeticOrBooleanExpr1> | e
<AnyTerm>  --->					<arithmeticExpr><AnyTerm1> | <boolConstt>
<AnyTerm1>  --->				<relationalOp><arithmeticExpr> | e
<arithmeticExpr>  --->			<term><arithmeticExpr1>
<arithmeticExpr1>  --->			<op1><term><arithmeticExpr1> | e
<term>  --->					<factor><term1>
<term1>  --->					<op2><factor><term1> | e
<factor>  --->					<var_id_num> | BO <arithmeticOrBooleanExpr> BC
<op1>  --->						PLUS | MINUS
<op2>  --->						MUL | DIV
<logicalOp>  --->				AND | OR
<relationalOp>  --->			LT | LE | GT | GE | EQ | NE
<declareStmt>  --->				DECLARE <idList> COLON <dataType> SEMICOL
<conditionalStmt>  --->			SWITCH BO ID BC START <caseStmts><default> END
<caseStmts>  --->				CASE <value> COLON <statements> BREAK SEMICOL <caseStmts1>
<caseStmts1>  --->				CASE <value> COLON <statements> BREAK SEMICOL <caseStmts1> | e
<value>  --->					NUM | TRUE | FALSE
<default>  --->					DEFAULT COLON <statements> BREAK SEMICOL | e
<iterativeStmt>  --->			FOR BO ID IN <range> BC START <statements> END | WHILE BO <arithmeticOrBooleanExpr> BC START <statements> END
<range>  --->					NUM RANGEOP NUM



//all production rules of a nt must be written in one line
//terminals must be separated from non terminals by spaces
